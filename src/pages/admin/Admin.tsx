import React, { useState } from 'react';
import axios from 'axios';
import styles from './styles.module.css';
import { api } from '../../shared/api';

const API_BASE_URL = api;

interface NewsData {
  title: string;
  date: string;
  author: string;
  description: string;
  changelog: string;
  password: string;
}

const Admin: React.FC = () => {
  const [activeTab, setActiveTab] = useState<'create' | 'delete'>('create');
  const [newsData, setNewsData] = useState<NewsData>({
    title: '',
    date: '',
    author: '',
    description: '',
    changelog: '',
    password: ''
  });
  const [deleteData, setDeleteData] = useState({
    title: '',
    password: ''
  });
  const [message, setMessage] = useState<{text: string, type: 'success' | 'error'} | null>(null);
  const [isLoading, setIsLoading] = useState(false);

  const handleCreateChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
    const { name, value } = e.target;
    setNewsData(prev => ({
      ...prev,
      [name]: value
    }));
  };

  const handleDeleteChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value } = e.target;
    setDeleteData(prev => ({
      ...prev,
      [name]: value
    }));
  };

  const handleCreateSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setIsLoading(true);
    
    try {
      const response = await axios.post(`${API_BASE_URL}/news/create`, newsData);
      
      setMessage({ 
        text: response.data.message || '–ù–æ–≤–æ—Å—Ç—å —Å–æ–∑–¥–∞–Ω–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ Telegram!', 
        type: 'success' 
      });
      setNewsData({
        title: '',
        date: '',
        author: '',
        description: '',
        changelog: '',
        password: ''
      });
    } catch (error: any) {
      setMessage({ 
        text: error.response?.data?.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ—Å—Ç–∏', 
        type: 'error' 
      });
    } finally {
      setIsLoading(false);
      setTimeout(() => setMessage(null), 5000);
    }
  };

  const handleDeleteSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setIsLoading(true);
    
    try {
      const response = await axios.post(`${API_BASE_URL}/news/delete`, deleteData);
      
      setMessage({ 
        text: response.data || '–ù–æ–≤–æ—Å—Ç—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!', 
        type: 'success' 
      });
      setDeleteData({
        title: '',
        password: ''
      });
    } catch (error: any) {
      setMessage({ 
        text: error.response?.data?.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –Ω–æ–≤–æ—Å—Ç–∏', 
        type: 'error' 
      });
    } finally {
      setIsLoading(false);
      setTimeout(() => setMessage(null), 5000);
    }
  };

  return (
    <div className={styles.adminContainer}>
      <header className={styles.header}>
        <h1>–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç—è–º–∏</h1>
        <p className={styles.subtitle}>–°–æ–∑–¥–∞–Ω–∏–µ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç—è–º–∏</p>
      </header>

      {message && (
        <div className={`${styles.message} ${styles[message.type]}`}>
          <span className={styles.messageIcon}>
            {message.type === 'success' ? '‚úì' : '‚ö†'}
          </span>
          {message.text}
        </div>
      )}

      <div className={styles.tabs}>
        <button
          className={`${styles.tabButton} ${activeTab === 'create' ? styles.active : ''}`}
          onClick={() => setActiveTab('create')}
        >
          <span className={styles.tabIcon}>‚úèÔ∏è</span> –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ—Å—Ç—å
        </button>
        <button
          className={`${styles.tabButton} ${activeTab === 'delete' ? styles.active : ''}`}
          onClick={() => setActiveTab('delete')}
        >
          <span className={styles.tabIcon}>üóëÔ∏è</span> –£–¥–∞–ª–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å
        </button>
      </div>

      <div className={styles.tabContent}>
        {activeTab === 'create' ? (
          <form onSubmit={handleCreateSubmit} className={styles.form}>
            <div className={styles.formGrid}>
              <div className={styles.formGroup}>
                <label htmlFor="title">–ó–∞–≥–æ–ª–æ–≤–æ–∫</label>
                <input
                  type="text"
                  id="title"
                  name="title"
                  value={newsData.title}
                  onChange={handleCreateChange}
                  placeholder="–í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–æ–≤–æ—Å—Ç–∏"
                  required
                />
              </div>

              <div className={styles.formGroup}>
                <label htmlFor="date">–î–∞—Ç–∞</label>
                <input
                  type="text"
                  id="date"
                  name="date"
                  value={newsData.date}
                  onChange={handleCreateChange}
                  placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: 16 –∏—é–Ω—è 2023"
                  required
                />
              </div>

              <div className={styles.formGroup}>
                <label htmlFor="author">–ê–≤—Ç–æ—Ä</label>
                <input
                  type="text"
                  id="author"
                  name="author"
                  value={newsData.author}
                  onChange={handleCreateChange}
                  placeholder="–ò–º—è –∞–≤—Ç–æ—Ä–∞"
                  required
                />
              </div>

              <div className={`${styles.formGroup} ${styles.fullWidth}`}>
                <label htmlFor="description">–û–ø–∏—Å–∞–Ω–∏–µ</label>
                <textarea
                  id="description"
                  name="description"
                  value={newsData.description}
                  onChange={handleCreateChange}
                  rows={4}
                  placeholder="–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏"
                  required
                />
              </div>

              <div className={`${styles.formGroup} ${styles.fullWidth}`}>
                <label htmlFor="changelog">–°–ø–∏—Å–æ–∫ –∏–∑–º–µ–Ω–µ–Ω–∏–π (–ø–æ –æ–¥–Ω–æ–º—É –Ω–∞ —Å—Ç—Ä–æ–∫—É)</label>
                <textarea
                  id="changelog"
                  name="changelog"
                  value={newsData.changelog}
                  onChange={handleCreateChange}
                  rows={6}
                  placeholder="–ü–µ—Ä–µ—á–∏—Å–ª–∏—Ç–µ –∫–ª—é—á–µ–≤—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è"
                  required
                />
              </div>

              <div className={styles.formGroup}>
                <label htmlFor="password">–ü–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</label>
                <input
                  type="password"
                  id="password"
                  name="password"
                  value={newsData.password}
                  onChange={handleCreateChange}
                  placeholder="–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å"
                  required
                />
              </div>
            </div>

            <button type="submit" className={styles.submitButton} disabled={isLoading}>
              {isLoading ? (
                <span className={styles.buttonLoader}></span>
              ) : (
                '–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –Ω–æ–≤–æ—Å—Ç—å'
              )}
            </button>
          </form>
        ) : (
          <form onSubmit={handleDeleteSubmit} className={styles.form}>
            <div className={styles.formGrid}>
              <div className={`${styles.formGroup} ${styles.fullWidth}`}>
                <label htmlFor="deleteTitle">–ó–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–æ–≤–æ—Å—Ç–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è</label>
                <input
                  type="text"
                  id="deleteTitle"
                  name="title"
                  value={deleteData.title}
                  onChange={handleDeleteChange}
                  placeholder="–í–≤–µ–¥–∏—Ç–µ —Ç–æ—á–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–æ–≤–æ—Å—Ç–∏"
                  required
                />
              </div>

              <div className={styles.formGroup}>
                <label htmlFor="deletePassword">–ü–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</label>
                <input
                  type="password"
                  id="deletePassword"
                  name="password"
                  value={deleteData.password}
                  onChange={handleDeleteChange}
                  placeholder="–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å"
                  required
                />
              </div>
            </div>

            <button 
              type="submit" 
              className={`${styles.submitButton} ${styles.deleteButton}`} 
              disabled={isLoading}
            >
              {isLoading ? (
                <span className={styles.buttonLoader}></span>
              ) : (
                '–£–¥–∞–ª–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å'
              )}
            </button>
          </form>
        )}
      </div>
    </div>
  );
};

export default Admin;